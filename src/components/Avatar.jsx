/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useAnimations, useFBX, useGLTF, useTexture } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";
import * as THREE from "three";

export function Avatar(props) {
  const { animation, dress = "default", gender = "male" } = props;
  const { headFollow, cursorFollow, wireframe } = useControls({
    headFollow: false,
    cursorFollow: false,
    wireframe: false,
  });
  const group = useRef();
  const [currentDress, setCurrentDress] = useState(dress);
  
  // Load the model
  const { scene } = useGLTF("/models/646d9dcdc8a5f5bddbfac913.glb");
  
  // Load animations
  const { animations: typingAnim } = useFBX("/animations/Typing.fbx");
  const { animations: standingAnim } = useFBX("/animations/Standing Idle.fbx");
  const { animations: fallingAnim } = useFBX("/animations/Falling Idle.fbx");
  
  // Name the animations
  typingAnim[0].name = "Typing";
  standingAnim[0].name = "Standing";
  fallingAnim[0].name = "Falling";
  
  // Setup animations
  const { actions } = useAnimations(
    [typingAnim[0], standingAnim[0], fallingAnim[0]],
    group
  );
  
  // Load the dress texture
  const dressTexture = useTexture("/shopping.jpg");
  dressTexture.flipY = false;
  dressTexture.encoding = THREE.sRGBEncoding;
  
  // Create dress materials
  const dressMaterials = {
    default: null, // Will use original material
    casual: new THREE.MeshStandardMaterial({
      map: dressTexture,
      color: "#4169e1",
      metalness: 0.2,
      roughness: 0.7,
    }),
    formal: new THREE.MeshStandardMaterial({
      map: dressTexture,
      color: "#800080",
      metalness: 0.3,
      roughness: 0.6,
    }),
    party: new THREE.MeshStandardMaterial({
      map: dressTexture,
      color: "#ffd700",
      metalness: 0.4,
      roughness: 0.5,
    }),
    summer: new THREE.MeshStandardMaterial({
      map: dressTexture,
      color: "#ff69b4",
      metalness: 0.1,
      roughness: 0.8,
    }),
    winter: new THREE.MeshStandardMaterial({
      map: dressTexture,
      color: "#4169e1",
      metalness: 0.2,
      roughness: 0.7,
    }),
  };
  
  // Update current dress when prop changes
  useEffect(() => {
    setCurrentDress(dress);
  }, [dress]);
  
  // Play animation when it changes
  useEffect(() => {
    if (animation && actions[animation]) {
      actions[animation].reset().fadeIn(0.5).play();
      return () => {
        actions[animation].fadeOut(0.5);
      };
    }
  }, [animation, actions]);
  
  // Handle head and cursor following
  useFrame((state) => {
    if (headFollow) {
      const head = group.current.getObjectByName("Head");
      if (head) {
        head.lookAt(state.camera.position);
      }
    }
    
    if (cursorFollow) {
      const spine = group.current.getObjectByName("Spine2");
      if (spine) {
        spine.lookAt(state.mouse.x * 10, state.mouse.y * 10, 0);
      }
    }
  });
  
  // Apply wireframe to all materials if enabled
  useEffect(() => {
    scene.traverse((child) => {
      if (child.isMesh) {
        child.material.wireframe = wireframe;
      }
    });
  }, [wireframe, scene]);
  
  // Clone the scene to avoid modifying the original
  const clonedScene = scene.clone();
  
  // Apply dress material to the appropriate meshes and adjust hand positions
  clonedScene.traverse((child) => {
    if (child.isMesh) {
      if (child.name.includes("Outfit_Top") || child.name.includes("Outfit_Bottom")) {
        // Only change material if not default
        if (currentDress !== "default" && dressMaterials[currentDress]) {
          child.material = dressMaterials[currentDress];
        }
      }
      // Reset hand positions to their original state
      if (child.name.includes("Hand")) {
        child.rotation.z = 0; // Reset hand rotation
      }
    }
  });
  
  return (
    <group {...props} ref={group} dispose={null} rotation={[0, Math.PI, 0]}>
      <primitive object={clonedScene} />
    </group>
  );
}

// Preload the model
useGLTF.preload("/models/646d9dcdc8a5f5bddbfac913.glb");
